CMAKE_MINIMUM_REQUIRED(VERSION 2.8)

LIST(APPEND CMAKE_MODULE_PATH "${CMAKE_CURRENT_SOURCE_DIR}/_macros")
INCLUDE(HIPAccMacros)
INCLUDE(ISPCMacros)


# provide only Debug and Release configurations
SET(CMAKE_CONFIGURATION_TYPES "Debug;Release" CACHE STRING "build config types" FORCE)
SET(CMAKE_BUILD_TYPE Release CACHE STRING "build type: Debug or Release" FORCE)


PROJECT(HIPAccBenchmark)

SET(HIPACC_EXECUTABLE_PATH "" CACHE PATH "The absolute path to the HIPAcc executable")
IF(NOT IS_ABSOLUTE ${HIPACC_EXECUTABLE_PATH})
    MESSAGE(FATAL_ERROR "HIPACC_EXECUTABLE_PATH has to be an absolute path!")
ENDIF()

SET(ISPC_EXECUTABLE_PATH "" CACHE PATH "The absolute path to the ISPC executable")
IF(NOT IS_ABSOLUTE ${ISPC_EXECUTABLE_PATH})
    MESSAGE(FATAL_ERROR "ISPC_EXECUTABLE_PATH has to be an absolute path!")
ENDIF()


# Define commonly used names
SET(NAME_HIPACC_OUTPUTS "HIPAccOutputs")
SET(NAME_HIPACC_SOURCES "HIPAccSources")
SET(NAME_ISPC_SOURCES   "ISPCSources")

# Define the names of the commonly used source groups
SET(SOURCE_GROUP_HEADER_FILES        "Header Files")
SET(SOURCE_GROUP_HIPACC_KERNELS      "HIPAcc\\Kernels")
SET(SOURCE_GROUP_HIPACC_OUTPUTS      "HIPAcc\\${NAME_HIPACC_OUTPUTS}")
SET(SOURCE_GROUP_HIPACC_SOURCES      "HIPAcc\\${NAME_HIPACC_SOURCES}")
SET(SOURCE_GROUP_PUBLIC_HEADER_FILES "Public Header Files")
SET(SOURCE_GROUP_SOURCE_FILES        "Source Files")

# Define the names of the commonly used suffices
SET(SUFFIX_DEFINES       "Defines")
SET(SUFFIX_GENERIC       "Generic")
SET(SUFFIX_HANDLER       "Handler")
SET(SUFFIX_HANDLERS      "Handlers")
SET(SUFFIX_HIPACC_KERNEL "filter.cc")
SET(SUFFIX_HIPACC_OUTPUT "_out.cpp")
SET(SUFFIX_TYPE_FLOAT    "Float")
SET(SUFFIX_TYPE_INT      "Int")
SET(SUFFIX_TYPE_UINT8    "UInt8")
SET(SUFFIX_VEC_AVX       "AVX")
SET(SUFFIX_VEC_SCALAR    "Scalar")
SET(SUFFIX_VEC_SSE       "SSE")
SET(SUFFIX_VEC_SSE2      "SSE2")
SET(SUFFIX_VEC_SSE3      "SSE3")
SET(SUFFIX_VEC_SSSE3     "SSSE3")
SET(SUFFIX_VEC_SSE4_1    "SSE4_1")
SET(SUFFIX_VEC_SSE4_2    "SSE4_2")


# Define the platform-dependent compiler flags
IF(MSVC)
    SET(CPP_COMP_FLAG_AVX    "/arch:AVX")
    SET(CPP_COMP_FLAG_OPENMP "/openmp")
ELSE(MSVC)
    SET(CPP_COMP_FLAG_AVX    "-mavx")
    SET(CPP_COMP_FLAG_OPENMP "-fopenmp")
ENDIF(MSVC)


IF(MSVC)
    SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
ENDIF(MSVC)

ADD_SUBDIRECTORY(BubbleSortMedian)
ADD_SUBDIRECTORY(BubbleSortMedianOptimized)
ADD_SUBDIRECTORY(Convolution)
ADD_SUBDIRECTORY(ImageAdd)
ADD_SUBDIRECTORY(MemoryThroughput)
ADD_SUBDIRECTORY(MinMaxDetector)
ADD_SUBDIRECTORY(NormalizedGradient)
ADD_SUBDIRECTORY(TopologicalErosion)

ADD_SUBDIRECTORY(Mandelbrot)

ADD_SUBDIRECTORY(Benchmark)

IF(MSVC)
    SET(TEST_LIBRARY_FOLDER     "Libraries")
    SET(TEST_LIBRARY_FOLDER_NEW "Libraries New")

    SET_PROPERTY(TARGET BubbleSortMedian           PROPERTY FOLDER ${TEST_LIBRARY_FOLDER})
    SET_PROPERTY(TARGET BubbleSortMedianOptimized  PROPERTY FOLDER ${TEST_LIBRARY_FOLDER})
    SET_PROPERTY(TARGET Convolution                PROPERTY FOLDER ${TEST_LIBRARY_FOLDER})
    SET_PROPERTY(TARGET ImageAdd                   PROPERTY FOLDER ${TEST_LIBRARY_FOLDER})
    SET_PROPERTY(TARGET MemoryThroughput           PROPERTY FOLDER ${TEST_LIBRARY_FOLDER})
    SET_PROPERTY(TARGET MinMaxDetector             PROPERTY FOLDER ${TEST_LIBRARY_FOLDER})
    SET_PROPERTY(TARGET NormalizedGradient         PROPERTY FOLDER ${TEST_LIBRARY_FOLDER})
    SET_PROPERTY(TARGET TopologicalErosion         PROPERTY FOLDER ${TEST_LIBRARY_FOLDER})

    SET_PROPERTY(TARGET Mandelbrot                 PROPERTY FOLDER ${TEST_LIBRARY_FOLDER_NEW})
ENDIF(MSVC)


